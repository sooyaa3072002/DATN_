https://colab.research.google.com/drive/10cNItElrXiAv3W_XmnZFRhcCI2naypIp?usp=sharing

#code
# ============================ #
#    1. Import th∆∞ vi·ªán c·∫ßn thi·∫øt
# ============================ #
!pip install pulp

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from google.colab import files

# ============================ #
#    2. T·∫£i & ƒë·ªçc d·ªØ li·ªáu g·ªëc ƒë·ªÉ hu·∫•n luy·ªán
# ============================ #
print("\U0001F4C2 Vui l√≤ng t·∫£i l√™n t·ªáp CSV d·ªØ li·ªáu hu·∫•n luy·ªán...")
uploaded = files.upload()
file_name = list(uploaded.keys())[0]
df = pd.read_csv(f"/content/{file_name}")

# ============================ #
#    3. Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu
# ============================ #
df["pvAvg12h"] = df["PV_Power_kW"].rolling(window=12, min_periods=1).mean().shift(1)
df["priceAvg12h"] = df["Gia_mua_dien"].rolling(window=12, min_periods=1).mean().shift(1)
df["loadAvg12h"] = df["Load_Power_kW"].rolling(window=12, min_periods=1).mean().shift(1)
# Ki·ªÉm tra c√°c c·ªôt trong dataframe
print("C√°c c·ªôt trong dataframe:", df.columns)
df.fillna(0, inplace=True)
# ============================ #
#    4. Chu·∫©n b·ªã t·∫≠p hu·∫•n luy·ªán
# ============================ #
feature_cols = [
    "PV_Power_kW", "Load_Power_kW", "SOC_kWh", "Gia_mua_dien",
    "Gia_ban_dien", "pvAvg12h", "priceAvg12h", "loadAvg12h",
]
X = df[feature_cols]
y = df["action"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ============================ #
#    5. Hu·∫•n luy·ªán m√¥ h√¨nh ph√¢n lo·∫°i h√†nh ƒë·ªông
# ============================ #
model = RandomForestClassifier(n_estimators=100, max_depth=10, class_weight='balanced', random_state=42)
model.fit(X_train, y_train)

# ============================ #
#    6. Hu·∫•n luy·ªán m√¥ h√¨nh h·ªìi quy cho c√¥ng su·∫•t s·∫°c/x·∫£
# ============================ #
reg_charge = RandomForestRegressor(n_estimators=100, max_depth=10, random_state=42)
reg_charge.fit(X_train, df.loc[X_train.index, '"P_charge_kW"'])



reg_discharge = RandomForestRegressor(n_estimators=100, max_depth=10, random_state=42)
reg_discharge.fit(X_train, df.loc[X_train.index, '"P_discharge_kW"'])

# ============================ #
#    7. M√¥ ph·ªèng 24h
# ============================ #
hours = np.arange(24)
pv = np.array([0, 0, 0, 0, 0, 0, 0.66, 1.32, 2.42, 3.30, 3.96, 4.40, 4.62, 4.40, 3.96, 3.08, 1.98, 0.88, 0, 0, 0, 0, 0, 0])
load = np.array([0.61, 0.61, 0.61, 0.61, 0.61, 0.61, 1.90, 2.15, 0.30, 0.30, 0.28, 3.13, 0.685, 0.68, 0.38, 0.38, 0.38, 1.52, 3.92, 3.92, 2.02, 2.02, 0.82, 0.67])

def get_price(h):
    if 22 <= h or h < 4:
        return 1830
    elif (9.5 <= h < 11.5) or (17 <= h < 20):
        return 5174
    else:
        return 3007

df_24h = pd.DataFrame({
    "hour": hours,
    "PV_Power_kW": pv,
    "Load_Power_kW": load,
    "Gia_mua_dien": [get_price(h) for h in hours],
    "Gia_ban_dien": [671]*24
})

df_24h["pvAvg12h"] = df_24h["PV_Power_kW"].rolling(12, 1).mean()
df_24h["priceAvg12h"] = df_24h["Gia_mua_dien"].rolling(12, 1).mean()
df_24h["loadAvg12h"] = df_24h["Load_Power_kW"].rolling(12, 1).mean()
df_24h.fillna(0, inplace=True)

# ============================ #
#    8. M√¥ ph·ªèng theo gi·ªù v·ªõi d·ª± ƒëo√°n h√†nh ƒë·ªông & c√¥ng su·∫•t b·∫±ng ML
# ============================ #
SOC = 9.6
SOC_min, SOC_max = 3.84, 15.36
P_charge_max = 9.6
P_discharge_max = 19.2

soc_list = []
p_charge = []
p_discharge = []
p_grid_buy = []
p_grid_sell = []
action_preds = []

for i in range(24):
    df_24h.loc[i, "SOC_kWh"] = SOC
    x_input = df_24h.loc[[i], feature_cols]

    action = model.predict(x_input)[0]
    if action == 1 and SOC >= SOC_max:
        action = 0
    elif action == 2 and SOC <= SOC_min:
        action = 0

    action_preds.append(action)

    if action == 1:
        charge_amount = reg_charge.predict(x_input)[0]
        charge_amount = min(charge_amount*0.9, P_charge_max, SOC_max - SOC)
        SOC += charge_amount
        p_charge.append(charge_amount)
        p_discharge.append(0)
    elif action == 2:
        discharge_amount = reg_discharge.predict(x_input)[0]
        discharge_amount = min(discharge_amount/0.85, P_discharge_max, SOC - SOC_min)
        SOC -= discharge_amount
        p_charge.append(0)
        p_discharge.append(discharge_amount)
    else:
        p_charge.append(0)
        p_discharge.append(0)

    p_grid = df_24h.loc[i, "PV_Power_kW"] + p_discharge[-1] - df_24h.loc[i, "Load_Power_kW"] - p_charge[-1]
    if p_grid >= 0:
        p_grid_sell.append(p_grid)
        p_grid_buy.append(0)
    else:
        p_grid_buy.append(-p_grid)
        p_grid_sell.append(0)

    SOC = max(min(SOC, SOC_max), SOC_min)
    soc_list.append(SOC)

# ============================ #
#    9. T·ªïng h·ª£p k·∫øt qu·∫£
# ============================ #
df_24h["action_pred"] = action_preds
df_24h["P_charge"] = p_charge
df_24h["P_discharge"] = p_discharge
df_24h["P_grid_buy"] = p_grid_buy
df_24h["P_grid_sell"] = p_grid_sell
df_24h["SOC"] = soc_list

df_24h["Chi_phi_mua"] = df_24h["P_grid_buy"] * df_24h["Gia_mua_dien"]
df_24h["Thu_nhap_ban"] = df_24h["P_grid_sell"] * df_24h["Gia_ban_dien"]
df_24h["Chi_phi_thuc"] = df_24h["Chi_phi_mua"] - df_24h["Thu_nhap_ban"]

# ============================ #
#    10. In k·∫øt qu·∫£
# ============================ #
print("\nüîã K·∫æT QU·∫¢ D·ª∞A TR√äN M√î H√åNH ML")
for t in range(24):
    print(f"Gi·ªù {t:02d}: S·∫°c = {df_24h.loc[t, 'P_charge']:.2f} kW | X·∫£ = {df_24h.loc[t, 'P_discharge']:.2f} kW | Mua = {df_24h.loc[t, 'P_grid_buy']:.2f} kW | B√°n = {df_24h.loc[t, 'P_grid_sell']:.2f} kW | SOC = {df_24h.loc[t, 'SOC']:.2f} kWh")

print(f"\nüí∞ T·ªïng chi ph√≠ mua ƒëi·ªán: {df_24h['Chi_phi_mua'].sum():,.0f} VNƒê")
print(f"üí∏ T·ªïng doanh thu b√°n ƒëi·ªán: {df_24h['Thu_nhap_ban'].sum():,.0f} VNƒê")
print(f"üìâ Chi ph√≠ th·ª±c t·∫ø: {df_24h['Chi_phi_thuc'].sum():,.0f} VNƒê")

# ============================ #
#    11. V·∫Ω bi·ªÉu ƒë·ªì
# ============================ #
plt.figure(figsize=(12, 6))
plt.plot(df_24h["hour"], df_24h["P_charge"], label="S·∫°c", marker='o')
plt.plot(df_24h["hour"], df_24h["P_discharge"], label="X·∫£", marker='s')
plt.plot(df_24h["hour"], df_24h["P_grid_buy"], label="Mua t·ª´ l∆∞·ªõi", marker='^')
plt.plot(df_24h["hour"], df_24h["P_grid_sell"], label="B√°n l√™n l∆∞·ªõi", marker='v')
plt.title("üîå C√¥ng su·∫•t theo t·ª´ng gi·ªù")
plt.xlabel("Gi·ªù")
plt.ylabel("kW")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 4))
plt.plot(df_24h["hour"], df_24h["SOC"], label="SOC (kWh)", color="orange", marker='o')
plt.title("üîã Tr·∫°ng th√°i pin (SOC) theo gi·ªù")
plt.xlabel("Gi·ªù")
plt.ylabel("kWh")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 4))
plt.plot(df_24h["hour"], df_24h["Chi_phi_mua"], label="Chi ph√≠ mua ƒëi·ªán", color="blue", marker='o')
plt.plot(df_24h["hour"], df_24h["Thu_nhap_ban"], label="Thu nh·∫≠p b√°n ƒëi·ªán", color="green", marker='s')
plt.title("üí∞ Chi ph√≠ mua & Doanh thu b√°n ƒëi·ªán theo gi·ªù")
plt.xlabel("Gi·ªù")
plt.ylabel("VNƒê")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()
