https://colab.research.google.com/drive/1rg9QDpJISQRKovC8Ix9eBRm-ILm1KS5D?usp=sharing

#code
# C√†i ƒë·∫∑t th∆∞ vi·ªán n·∫øu c·∫ßn (d√†nh cho Google Colab)
!pip install pulp pandas matplotlib openpyxl xlsxwriter

from google.colab import files
uploaded = files.upload()

import numpy as np
import pulp
import pandas as pd
import matplotlib.pyplot as plt

# ƒê·ªçc d·ªØ li·ªáu t·ª´ file CSV
data = pd.read_csv('dauvaomilp.csv')

# Th√¥ng s·ªë h·ªá th·ªëng
capacity_battery = 19.2  # kWh
max_charge_power = 9.6   # kW
max_discharge_power = 19.2  # kW
soc_min = 0.2 * capacity_battery
soc_max = 0.8 * capacity_battery
efficiency_charge = 0.9
efficiency_discharge = 0.85
initial_soc = 0.5 * capacity_battery

# Gi·ªõi h·∫°n l∆∞·ªõi
max_grid_buy = 15  # kW
max_grid_sell = 10  # kW

# Gi√° ƒëi·ªán mua theo gi·ªù
def get_buy_price_by_time(hour):
    if 22 <= hour or hour < 4:
        return 1830  # th·∫•p ƒëi·ªÉm
    elif (9.5 <= hour < 11.5) or (17 <= hour < 20):
        return 5174  # cao ƒëi·ªÉm
    else:
        return 3007  # b√¨nh th∆∞·ªùng

sell_price = 671  # VNƒê/kWh

# D·ªØ li·ªáu t·ª´ file
Gi·ªù = data['Hour'].values
PV_power = data['PV_Power_kW'].values
Load_power = data['Load_Power_kW'].values
n = len(Gi·ªù)

# Kh·ªüi t·∫°o m√¥ h√¨nh
model = pulp.LpProblem("Battery_Scheduling", pulp.LpMinimize)

# Bi·∫øn quy·∫øt ƒë·ªãnh
P_charge = pulp.LpVariable.dicts("P_charge", range(n), 0, max_charge_power)
P_discharge = pulp.LpVariable.dicts("P_discharge", range(n), 0, max_discharge_power)
P_grid_buy = pulp.LpVariable.dicts("P_grid_buy", range(n), 0, max_grid_buy)
P_grid_sell = pulp.LpVariable.dicts("P_grid_sell", range(n), 0, max_grid_sell)
SOC = pulp.LpVariable.dicts("SOC", range(n), soc_min, soc_max)
x_charge = pulp.LpVariable.dicts("x_charge", range(n), 0, 1, pulp.LpBinary)
x_discharge = pulp.LpVariable.dicts("x_discharge", range(n), 0, 1, pulp.LpBinary)

# H√†m m·ª•c ti√™u
model += pulp.lpSum(P_grid_buy[t] * get_buy_price_by_time(Gi·ªù[t]) for t in range(n)) - pulp.lpSum(P_grid_sell[t] * sell_price for t in range(n))

# R√†ng bu·ªôc
for t in range(n):
    if t == 0:
        model += SOC[t] == initial_soc + P_charge[t] * efficiency_charge - P_discharge[t] * (1 / efficiency_discharge)
    else:
        model += SOC[t] == SOC[t-1] + P_charge[t] * efficiency_charge - P_discharge[t] * (1 / efficiency_discharge)

    model += P_discharge[t] + P_grid_buy[t] - P_charge[t] - P_grid_sell[t] == Load_power[t] - PV_power[t]
    model += x_charge[t] + x_discharge[t] <= 1
    model += P_charge[t] <= max_charge_power * x_charge[t]
    model += P_discharge[t] <= max_discharge_power * x_discharge[t]
    # Kh√¥ng s·∫°c t·ª´ l∆∞·ªõi: ch·ªâ ƒë∆∞·ª£c s·∫°c t·ª´ PV
    model += P_charge[t] <= PV_power[t]

# Gi·∫£i m√¥ h√¨nh
model.solve()

# Thu th·∫≠p k·∫øt qu·∫£
buy_energy, sell_energy = [], []
charge_energy, discharge_energy = [], []
battery_state = []
power_charge_kw, power_discharge_kw = [], []
buy_cost_per_hour, sell_revenue_per_hour = [], []

for t in range(n):
    P_buy = P_grid_buy[t].varValue
    P_sell = P_grid_sell[t].varValue
    P_chg = P_charge[t].varValue
    P_dis = P_discharge[t].varValue
    SOC_t = SOC[t].varValue

    buy_energy.append(P_buy)
    sell_energy.append(P_sell)
    power_charge_kw.append(P_chg)
    power_discharge_kw.append(P_dis)
    charge_energy.append(P_chg * efficiency_charge)
    discharge_energy.append(P_dis * (1 / efficiency_discharge))
    battery_state.append(SOC_t)

    buy_cost_per_hour.append(P_buy * get_buy_price_by_time(Gi·ªù[t]))
    sell_revenue_per_hour.append(P_sell * sell_price)

# T·ªïng h·ª£p
buy_cost_total = sum(buy_cost_per_hour)
sell_revenue_total = sum(sell_revenue_per_hour)
net_cost = buy_cost_total - sell_revenue_total

# T√≠nh h√†nh ƒë·ªông t·ª´ SOC
action = [0]  # gi·ªù ƒë·∫ßu ti√™n kh√¥ng so s√°nh ƒë∆∞·ª£c

for t in range(1, n):
    if battery_state[t] > battery_state[t-1]:
        action.append(1)  # ƒëang s·∫°c
    elif battery_state[t] < battery_state[t-1]:
        action.append(2)  # ƒëang x·∫£
    else:
        action.append(0)  # kh√¥ng thay ƒë·ªïi

# Th√™m c·ªôt Action v√†o b·∫£ng k·∫øt qu·∫£
results_df = pd.DataFrame({
    'Hour': Gi·ªù,
    'PV_Power_kW': PV_power,
    'Load_Power_kW': Load_power,
    'P charge': power_charge_kw,
    'P discharge': power_discharge_kw,
    'SOC_kWh': battery_state,
    'Action': action  # Th√™m c·ªôt Action v√†o b·∫£ng k·∫øt qu·∫£
})

# T·ªïng k·∫øt
summary_df = pd.DataFrame({
    'T·ªïng c·ªông': [''],
    'Mua t·ª´ l∆∞·ªõi (kWh)': [sum(buy_energy)],
    'Chi ph√≠ mua (VNƒê)': [buy_cost_total],
    'B√°n l√™n l∆∞·ªõi (kWh)': [sum(sell_energy)],
    'Doanh thu b√°n (VNƒê)': [sell_revenue_total],
    'Chi ph√≠ th·ª±c t·∫ø (VNƒê)': [net_cost]
})

# Xu·∫•t k·∫øt qu·∫£ ra file Excel
with pd.ExcelWriter("ket_qua_lap_lich_pin.xlsx", engine='xlsxwriter') as writer:
    results_df.to_excel(writer, sheet_name='Chi_tiet_theo_gio', index=False)
    summary_df.to_excel(writer, sheet_name='Tong_ket', index=False)

# Hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt
print("\nüìä Chi ti·∫øt l·∫≠p l·ªãch theo gi·ªù:")
print("Gi·ªù | Mua | Chi ph√≠ | B√°n | Doanh thu | S·∫°c (kW) | X·∫£ (kW) | SOC | Action")
print("-" * 100)
for t in range(n):
    print(f"{Gi·ªù[t]:2} | {buy_energy[t]:5.2f} | {buy_cost_per_hour[t]:9.0f} | {sell_energy[t]:5.2f} | {sell_revenue_per_hour[t]:10.0f} | {power_charge_kw[t]:8.2f} | {power_discharge_kw[t]:8.2f} | {battery_state[t]:6.2f} | {action[t]}")

# T·ªïng k·∫øt
print("\nüìå *T·ªïng k·∫øt:*")
print(f"üîπ T·ªïng ƒëi·ªán mua: {sum(buy_energy):.2f} kWh")
print(f"üîπ T·ªïng ƒëi·ªán b√°n: {sum(sell_energy):.2f} kWh")
print(f"üîπ Chi ph√≠ mua ƒëi·ªán: {buy_cost_total:.0f} VNƒê")
print(f"üîπ Thu nh·∫≠p t·ª´ b√°n ƒëi·ªán: {sell_revenue_total:.0f} VNƒê")
print(f"üîπ T·ªïng chi ph√≠ th·ª±c t·∫ø: {net_cost:.0f} VNƒê")

# V·∫Ω bi·ªÉu ƒë·ªì
plt.figure(figsize=(10, 6))
plt.plot(Gi·ªù, PV_power, 'b-o', label="PV Power (kW)")
plt.plot(Gi·ªù, Load_power, 'orange', marker='o', linestyle='-', label="Load (kW)")
plt.plot(Gi·ªù, buy_energy, 'g-o', label="Buy Grid (kW)")
plt.plot(Gi·ªù, sell_energy, 'r-o', label="Sell Grid (kW)")
plt.xlabel("Gi·ªù")
plt.ylabel("C√¥ng su·∫•t (kW)")
plt.title("L·ªãch mua/b√°n/s·∫£n xu·∫•t ƒëi·ªán theo gi·ªù")
plt.legend()
plt.grid()
plt.show()

plt.figure(figsize=(10, 6))
plt.plot(Gi·ªù, battery_state, 'purple', marker='o', linestyle='-', label="SOC (kWh)")
plt.xlabel("Gi·ªù")
plt.ylabel("Tr·∫°ng th√°i pin (SOC)")
plt.title("SOC c·ªßa pin theo th·ªùi gian")
plt.legend()
plt.grid()
plt.show()

# Chi ph√≠ v√† doanh thu t√≠ch l≈©y
cumulative_buy_cost = np.cumsum(buy_cost_per_hour)
cumulative_sell_revenue = np.cumsum(sell_revenue_per_hour)
plt.figure(figsize=(10, 6))
plt.plot(Gi·ªù, cumulative_buy_cost, 'g-o', label="T√≠ch l≈©y chi ph√≠ mua (VNƒê)")
plt.plot(Gi·ªù, cumulative_sell_revenue, 'r-o', label="T√≠ch l≈©y doanh thu b√°n (VNƒê)")
plt.xlabel("Gi·ªù")
plt.ylabel("VNƒê")
plt.title("Chi ph√≠ & doanh thu t√≠ch l≈©y theo th·ªùi gian")
plt.legend()
plt.grid()
plt.show()

# T·∫£i file k·∫øt qu·∫£
files.download("ket_qua_lap_lich_pin.xlsx")
